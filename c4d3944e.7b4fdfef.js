(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{191:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"CarbonAds",(function(){return p})),t.d(n,"default",(function(){return d}));var r=t(2),o=t(9),a=t(0),s=t(209),c={id:"presets",title:"Presets",layout:"Guide"},i={id:"presets",title:"Presets",description:"export const CarbonAds = () => {",source:"@site/docs/presets.mdx",permalink:"/docs/presets",editUrl:"https://github.com/cssnano/cssnano/edit/master/website/docs/presets.mdx",lastUpdatedBy:"Anix",lastUpdatedAt:1598626157,sidebar:"docs",previous:{title:"Optimisations",permalink:"/docs/what-are-optimisations"},next:{title:"Advanced transforms",permalink:"/docs/advanced-transforms"}},l=[{value:"What are presets?",id:"what-are-presets",children:[]},{value:"How do presets work?",id:"how-do-presets-work",children:[]},{value:"Options syntax",id:"options-syntax",children:[]},{value:"Excluding transforms",id:"excluding-transforms",children:[]}],p=function(){return Object(a.useEffect)((function(){if(!document.getElementById("carbonads")){var e=document.querySelector(".carbon_ads_mdx_wrapper"),n=document.createElement("script");n.src="//cdn.carbonads.com/carbon.js?serve=CEBI62JN&placement=cssnanoco",n.async=!0,n.id="_carbonads_js",e.appendChild(n)}})),Object(s.b)("div",{className:"carbon_ads_mdx_wrapper"})},u={rightToc:l,CarbonAds:p};function d(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)(p,{mdxType:"CarbonAds"}),Object(s.b)("h2",{id:"what-are-presets"},"What are presets?"),Object(s.b)("p",null,"Starting with version 4, presets are a way of loading cssnano with different\nfeatures, depending on your use case. Now, instead of having to opt-out of\nadvanced transformations, you can choose to opt-in instead. Prior to the\nintroduction of presets, code to perform advanced transformations was downloaded\nfrom npm whether or not it was used. Presets ensure that this is no longer the\ncase, and also afford the ability to save configuration for cssnano to re-use\nacross multiple contexts."),Object(s.b)("h2",{id:"how-do-presets-work"},"How do presets work?"),Object(s.b)("p",null,"cssnano runs a few different operations to check what preset it should use.\nFirstly, it checks that it was loaded with a preset when it was initialized;\nif so, it will use that one. For example, using a ",Object(s.b)("inlineCode",{parentName:"p"},"postcss.config.js")," in the\nproject root:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n    plugins: [\n        require('cssnano')({\n            preset: 'default',\n        }),\n    ],\n};\n")),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"The preset name points to a resolvable node module, optionally with the\n",Object(s.b)("inlineCode",{parentName:"em"},"cssnano-preset-")," prefix. So you can specify ",Object(s.b)("inlineCode",{parentName:"em"},"cssnano-preset-default")," here\ninstead if you wish.")),Object(s.b)("p",null,"If you need to pass any options to a preset, you must specify them using the\narray syntax instead. For example, you can remove all comments with the\nfollowing configuration:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n    plugins: [\n        require('cssnano')({\n            preset: ['default', {\n                discardComments: {\n                    removeAll: true,\n                },\n            }]\n        }),\n    ],\n};\n")),Object(s.b)("p",null,"For other cases where the preset was not explicitly set, cssnano will look\nfor a section in your ",Object(s.b)("inlineCode",{parentName:"p"},"package.json")," or a ",Object(s.b)("inlineCode",{parentName:"p"},"cssnano.config.js"),", from the current\nworking directory upwards until it reaches your home directory. These two\nconfiguration examples function identically to the above:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n  "name": "awesome-application",\n  "cssnano": {\n    "preset": [\n      "default",\n      {"discardComments": {"removeAll": true}}\n    ]\n  }\n}\n')),Object(s.b)("p",null,"And the ",Object(s.b)("inlineCode",{parentName:"p"},"cssnano.config.js"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const defaultPreset = require('cssnano-preset-default');\n\nmodule.exports = defaultPreset({\n    discardComments: {\n        removeAll: true,\n    },\n});\n")),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"The ",Object(s.b)("inlineCode",{parentName:"em"},"cssnano.config.js")," is useful if you need to make use of transformations\nthat can accept functions as parameters, for more specific use cases.")),Object(s.b)("p",null,"If cssnano was not loaded with a preset explicitly, or a config section/file\nwere not found in any parent directories, then the defaults will be loaded.\nAn example ",Object(s.b)("inlineCode",{parentName:"p"},"postcss.config.js"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n    plugins: [\n        require('cssnano'),\n    ],\n};\n")),Object(s.b)("p",null,"For most use cases, the default preset should be suitable for your needs, but\nwe also offer an advanced preset which performs more aggressive transformations.\nYou can read more about this in\n",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"/guides/advanced-transforms"}),"our advanced transformations guide"),"."),Object(s.b)("h2",{id:"options-syntax"},"Options syntax"),Object(s.b)("p",null,"The options follow a simple pattern - the optional ",Object(s.b)("inlineCode",{parentName:"p"},"postcss-")," prefix is removed\nand then the rest should be converted into ",Object(s.b)("inlineCode",{parentName:"p"},"camelCase"),". So, if you need to set\nan option for ",Object(s.b)("inlineCode",{parentName:"p"},"postcss-svgo"),", you can do:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n    plugins: [\n        require('cssnano')({\n            preset: ['default', {\n                svgo: {\n                    plugins: [{\n                        removeDoctype: false,\n                    }],\n                },\n            }],\n        }),\n    ],\n};\n")),Object(s.b)("h2",{id:"excluding-transforms"},"Excluding transforms"),Object(s.b)("p",null,"You may wish to exclude a transform from the list if it isn't required for your\nbuild; there are two possible ways to do this. The first is to set the option\nkey to ",Object(s.b)("inlineCode",{parentName:"p"},"false"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n    plugins: [\n        require('cssnano')({\n            preset: ['default', {\n                svgo: false,\n            }],\n        }),\n    ],\n};\n")),Object(s.b)("p",null,"Alternately, if you have already supplied options and would prefer to exclude\na transform temporarily, you may set the ",Object(s.b)("inlineCode",{parentName:"p"},"exclude")," option:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n    plugins: [\n        require('cssnano')({\n            preset: ['default', {\n                svgo: {\n                    exclude: true,\n                },\n            }],\n        }),\n    ],\n};\n")))}d.isMDXComponent=!0},209:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),p=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(t),b=r,m=u["".concat(s,".").concat(b)]||u[b]||d[b]||a;return t?o.a.createElement(m,c(c({ref:n},l),{},{components:t})):o.a.createElement(m,c({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=b;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<a;l++)s[l]=t[l];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);