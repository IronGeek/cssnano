(self.webpackChunksite=self.webpackChunksite||[]).push([[4494],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||a;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5707:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return p},toc:function(){return l},ExampleChart:function(){return c},default:function(){return d}});var r=t(2122),o=t(9756),a=t(7294),i=t(3905),s={id:"config-file",title:"Config Files",layout:"Guide",order:3},p={unversionedId:"config-file",id:"config-file",isDocsHomePage:!1,title:"Config Files",description:"export const ExampleChart = () => {",source:"@site/docs/config-file.mdx",sourceDirName:".",slug:"/config-file",permalink:"/docs/config-file",editUrl:"https://github.com/cssnano/cssnano/edit/master/site/docs/config-file.mdx",version:"current",lastUpdatedBy:"Ludovico Fischer",lastUpdatedAt:1620223835,formattedLastUpdatedAt:"5/5/2021",frontMatter:{id:"config-file",title:"Config Files",layout:"Guide",order:3},sidebar:"docs",previous:{title:"Getting started",permalink:"/docs/getting-started"},next:{title:"Optimisations",permalink:"/docs/what-are-optimisations"}},l=[{value:"<code>cssnano</code> config files",id:"cssnano-config-files",children:[]},{value:"Options",id:"options",children:[{value:"<code>preset</code>",id:"preset",children:[]},{value:"<code>plugins</code>",id:"plugins",children:[]}]},{value:"Alternatives",id:"alternatives",children:[]}],c=function(){return(0,a.useEffect)((function(){var e=document.querySelector(".carbon_ads_mdx_wrapper"),n=document.createElement("script");n.src="//cdn.carbonads.com/carbon.js?serve=CEBI62JN&placement=cssnanoco",n.async=!0,n.id="_carbonads_js",e.appendChild(n)})),(0,i.kt)("div",{className:"carbon_ads_mdx_wrapper"})},u={toc:l,ExampleChart:c};function d(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(c,{mdxType:"ExampleChart"}),(0,i.kt)("h2",{id:"cssnano-config-files"},(0,i.kt)("inlineCode",{parentName:"h2"},"cssnano")," config files"),(0,i.kt)("p",null,"We use configuration for ",(0,i.kt)("inlineCode",{parentName:"p"},"cssnano")," using file name as ",(0,i.kt)("inlineCode",{parentName:"p"},"cssnano.config.js")," , ",(0,i.kt)("inlineCode",{parentName:"p"},"cssnano")," property in your ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),", using ",(0,i.kt)("inlineCode",{parentName:"p"},"cssnano.config.json")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".cssnanorc")," as well.\nWe are using ",(0,i.kt)("inlineCode",{parentName:"p"},"cosmiconfig")," in order to load cssnano config. Please read ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/davidtheclark/cosmiconfig"},"here")," for more details"),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("h3",{id:"preset"},(0,i.kt)("inlineCode",{parentName:"h3"},"preset")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"function")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"[string, Objects<preset options here>]")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"[function(preset options here)]"))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", the name should be of type ",(0,i.kt)("inlineCode",{parentName:"p"},"cssnano-preset-<name>")," and you need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," alone eg : ",(0,i.kt)("inlineCode",{parentName:"p"},"preset : ['default', {}]"))),(0,i.kt)("p",null,"Contains lists of ",(0,i.kt)("inlineCode",{parentName:"p"},"postcss")," plugins where each plugin does their own minification."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// cssnano.config.js\nmodule.exports = {\n  preset: [require('cssnano-preset-default')]\n  \n  // or\n  preset: require('cssnano-preset-default')\n  \n  // or\n  preset: ['advanced', { discardComments: false }]\n\n  // or\n  preset: [require('cssnano-preset-default'), {discardComments: false}]\n}\n")))),(0,i.kt)("h3",{id:"plugins"},(0,i.kt)("inlineCode",{parentName:"h3"},"plugins")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"li"},"Array<'string' | 'function' | ['string' | 'function', Object<Options for the plugin here>]>"))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If you want to pass config to the plugin, you need to use Array's of array for the plugins i.e ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins: [ ['autoprefixer', {}] ]"))),(0,i.kt)("p",null,"These plugins will run after once all presets operations are complete."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// cssnano.config.js\nmodule.exports = {\n  plugins: [require('autoprefixer')]\n  \n  // or\n  plugins: ['autoprefixer', 'postcss-preset-env']\n  \n  // or\n  plugins: [ \n    ['autoprefixer', { remove: false }],\n  ]\n\n  // or\n  plugins: [\n    [ require('autoprefixer'), {remove: false} ],\n    [ 'postcss-preset-env']\n  ]\n}\n")))),(0,i.kt)("h2",{id:"alternatives"},"Alternatives"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"postcss")," config file and both ",(0,i.kt)("inlineCode",{parentName:"p"},"preset")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins")," will be passed as the options for ",(0,i.kt)("inlineCode",{parentName:"p"},"cssnano"),".\nRefer ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/postcss/postcss#usage"},"here")," for more details."))}d.isMDXComponent=!0}}]);